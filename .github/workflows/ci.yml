name: Ubuntu CI

on:
  pull_request:
  push:
    tags:
      - '*'
    branches:
      - main
  schedule:
    - cron: '30 2 * * 1,4' # Every Monday and Thursday @ 2h30am UTC

jobs:
  check_skip:
    runs-on: ubuntu-latest
    if: |
      !contains(format('{0} {1} {2}', github.event.head_commit.message, github.event.pull_request.title, github.event.pull_request.body), '[skip ci]')
    steps:
      - run: |
          cat <<'MESSAGE'
          github.event_name: ${{ toJson(github.event_name) }}
          github.event:
          ${{ toJson(github.event) }}
          MESSAGE
  test:
    needs: check_skip
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Checkout the DDfacet code base
        uses: actions/checkout@v4
        with:
          repository: saopicc/DDFacet
          path: ddfacet

      - name: Checkout ddfacet-kernels
        uses: actions/checkout@v4

      - name: Create a DDFacet virtualenv
        run: |
          uv venv -p ${{ matrix.python-version }} ${{ runner.temp }}/ddf-venv
          source ${{ runner.temp }}/ddf-venv/activate
          pip install -r gen-test-data/test-requirements.txt
          export PYTHONPATH=$PYTHONPATH:$(pwd)/ddfacet
          python gen-test-data/gen_test_data.py
          ls -lh *.xz

      - name: Install the project with testing support
        run: uv sync --locked --extra tests

      - name: Run the test cases
        run: uv run py.test -s -vvv


  deploy:
    needs: [test]
    runs-on: ubuntu-latest
    # Run on a push to a tag or master
    if: >
      github.event_name == 'push' &&
      (startsWith(github.event.ref, 'refs/tags') ||
       github.event.ref == 'refs/heads/master')

    steps:
      - name: Set up Python 3.10
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.10'

      - name: Install poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build distributions
        run: poetry build

      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.test_pypi_token }}
          repository_url: https://test.pypi.org/legacy/
        continue-on-error: true

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@master
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
